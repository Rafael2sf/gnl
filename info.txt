# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    info.txt                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rafernan <rafernan@student.42lisboa.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/10/22 13:59:43 by rafernan          #+#    #+#              #
#    Updated: 2021/10/24 14:52:20 by rafernan         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "get_next_line.h"
#include <stdio.h>
#include <string.h>
#include <strings.h>

static char *gnl_get_line(char **b, char **s, char **l)
{
	size_t	i;
	char	*tmp;

	i = 0;
	while (*s && *s != '\n')
		i++;
	if (*s == '\n')
	{
		*l = (char *)malloc(sizeof(char) * (i + 1));
		ft_strlcpy(*l, *s, i + 1);
		*s = strdup(*s + i);
	}
	

}

static char *gnl_get_storage(char **b, char **s)
{
	char	*tmp;
	size_t	slen;
	size_t	blen;

	if (!*b)
	{
		*b = *s;
		*s = NULL;
	}
	else
	{
		blen = ft_strlen(*b);
		slen = ft_strlen(*s);
		tmp = (char *)malloc(slen + blen + 1);
		if (!tmp)	
			return (NULL);
		tmp = ft_strjoin(*b, *s);
			return (NULL);
		if (!*b)
			free(*b);
		free(*s);
		*s = NULL;
		*b = tmp;
	}
	return (*b);
}

static size_t	gnl_read(int fd, char **buf)
{
	ssize_t	res;
	
	printf("[0][Malloc buf]\n");
	*buf = (char *)malloc(sizeof(char) * (BUFFER_SIZE + 1));
	if (!*buf)
		return (-1);
	memset(*buf, 0, BUFFER_SIZE + 1);
	printf("[1][Read buffer]");
	res = read(fd, *buf, BUFFER_SIZE);
	printf("[%ld]\n", res);
	if (res)
		*((*buf) + BUFFER_SIZE + 1) = '\0';
	return (res);
}

char	*get_next_line(int fd)
{
	static char	*storage;
	char		*line;
	char		*buf;

	if ((read(fd, NULL, 0) == -1) || (fd < 0 || fd > 1024) || BUFFER_SIZE <= 0)
		return (strdup("(-1)"));
	while (1)
	{
		if (storage)
		{
			buf = gnl_get_storage(&buf, &storage);
			if (!buf)
				return (strdup("(-2)"));
		}
		if (buf)
			gnl_get_line(buf, storage, line);
		if (!storage && !buf)
		{
			if (gnl_read(fd, &buf) < 0)
				return (strdup("(-1)"));
		}
	}
	return (strdup("(0)"));
}

/*

(----- BUF -----)
(---NL---)
		(-- STO-)

		if no buf and no storage
			read to buf
		if storage
			push to buffer
		if buf
			if line in buf
				get line and save remainedr to storage
			else
				read new line
				strjoin to buf
*/



-----------
if (...)
	return
buf = allocate()
if !buf return

while (strchr buf == NULL)
	read n bytes to buf
	strjoin to storage

-----------------------------


gnl:

	buf = ver();
	if !buf
		return(NULL)
	ptr = strchrn
	if (!ptr)
	{
		alloc (buffer)
		while (ptr == NULL && i != 0)
			i = gread(); save();
			if (i = -1)
				return (NULL)
		free(buf);
	}
	getline(); save();

ver:
	if (...)
		return NULL
	tmp = malloc
	return (malloc)

--------------------

read buf

try to get a line of buf (i++)
	tmp  = malloc ( i + strlen(storage) )
	realloc storage ( storage, i, strlen(str+i), buf)
else
	realloc storage ( storage, 0, i + strlen(buf), buf)
